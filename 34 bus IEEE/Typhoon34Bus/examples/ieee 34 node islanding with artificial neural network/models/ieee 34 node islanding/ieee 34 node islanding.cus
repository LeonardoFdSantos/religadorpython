<ui_settings>
    <version>2.6</version>
    <model_locked>True</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add a custom folder
# with Python files and packages to the PYTHONPATH. After folder is added, all Python 
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# Numpy module is imported as 'np'
# Pandas module is imported as 'pd'

import os
import sys
import numpy as np
import pandas as pd
import pickle
from threading import RLock

#Import of sci-kit and pywavelets modules
from sklearn.neural_network import MLPClassifier
import sklearn.exceptions
import pywt

model_path = hil.get_model_file_path()
feat_path = os.path.dirname(os.path.dirname(model_path))

with open(feat_path+"\\extracted features init.csv", "w") as f:
    f.write("")

with open(feat_path+"\\extracted features.csv", "a") as f:   
    f.write("")
    
# Globals
islanding_flag = False
capture_counter = 0
accuracy = 0
Loaded = False
LoadedFlagT = False
LoadedFlagU = False
lock = RLock()

return_dict = { "islanding_flag":islanding_flag,
                "capture_counter":capture_counter,
                "accuracy":accuracy}
                    
last_tests_correct = []
use_typhoon_model = False
training = True
can_test = False
# After n_cap_train captures, the ANN is trained
n_cap_train = 6


with open(feat_path + "\\ieee 34 node islanding.sav", "rb") as f:
    typhoon_model = pickle.load(f)

#defining the neural network
activation_ = ["identity", "logistic", "tanh", "relu"]
solver_ = ["lbfgs", "sgd", "adam"]
user_classifier = MLPClassifier(activation=activation_[3], solver=solver_[2], 
                                learning_rate_init=0.007, random_state=1,
                                hidden_layer_sizes=(30, 50, 11, 9, 3), max_iter=500,
                                early_stopping=False, n_iter_no_change=50, shuffle=True)

Vn = 24900.0
vphase_peak_to_pu = 1 / (np.sqrt(2 / 3.0) * Vn)
t_samp = hil.get_sim_step() # Simulation sampling time
freq_samp = 1/t_samp        # Sampling frequency
decimation = 10
freq_grid = 60              # Grid frequency
N_grid_cycles = 4           # Total grid cycles to be captured
N_samp = int(freq_samp * N_grid_cycles / decimation / freq_grid)    # Number of samples to be captured
if (N_samp % 2) != 0:
    N_samp += 1

# store the widget id
w_id = "b80ba01c888711eb96841c1bb5b93d80"
wh = panel.get_widget_by_id(w_id)

def capture_signals(return_dict, switch_name = "", training_mode=True):
    """
    """
    global user_classifier
    global n_cap_train
    
    
    capture_counter = return_dict.get("capture_counter")
    
    inital_state = panel.get_property_value(wh, prop_name="state")
    panel.set_property_value(wh, prop_name="state", prop_value="Capture")

    # signals to be captured
    channel_settings = ["NODE DG.Va", "NODE DG.Vb", "NODE DG.Vc",]
    trigger_settings = ['Forced']
    # decimation, number of channels, number of samples, enable digital capture
    capture_settings = [decimation, len(channel_settings), N_samp, False]
    # regular python list is used for data buffer
    captured_data_buffer = []
    
    
    hil.start_capture(capture_settings, trigger_settings, channel_settings,
                      dataBuffer=captured_data_buffer, fileName=r'')
                      
                      
    switch_names = ['Sgrid.enable', 'Sgrid2.enable', 'Sdg.enable']
    for sw in switch_names:
        if not hil.model_read(f'{sw}_fb') == 1:
            islanding = 1
            break
        else:
            islanding = 0

    while hil.capture_in_progress():
        printf("Capture in progress")
        pass
    printf("Capture is finished")
    
    (signals_names, y_data_matrix, x_data) = captured_data_buffer[0]
    
    panel.set_property_value(wh, prop_name="state", prop_value=inital_state)

    features = process_data(y_data_matrix) + [ islanding ]
    
    global last_tests_correct
    if training_mode:
        with open(feat_path+"\\extracted features init.csv", "ab") as f:
            np.savetxt(f, X=[features], fmt="%.6e", delimiter=',')
        with open(feat_path+"\\extracted features.csv", "ab") as f:
            np.savetxt(f, X=[features], fmt="%.6e", delimiter=',')
    else:
        if not use_typhoon_model:
            result = user_classifier.predict(np.array(features[0:-1]).reshape(1,-1))
            islanding_flag = True if result[0]==1.0 else False
            
            # Measure the accuracy of the last 20 tests
            if islanding == 1 and  islanding_flag == True \
            or islanding == 0 and  islanding_flag == False:
                correct = 1
            else:
                correct = 0
            if len(last_tests_correct) < 20:
                last_tests_correct.append(correct)
            else:
                # FIFO
                last_tests_correct = last_tests_correct[1:19]
                last_tests_correct.append(correct)
            
            # % Accuracy
            acc = sum(last_tests_correct)/len(last_tests_correct)*100
            
            return_dict = {"islanding_flag":islanding_flag,
                    "capture_counter":capture_counter,
                    "accuracy":acc}
            return return_dict

    # % Accuracy
    if len(last_tests_correct) > 0:
        acc = sum(last_tests_correct)/len(last_tests_correct)*100
    else:
        acc = 0.0
    
    capture_counter += 1
    if not capture_counter == 0 and capture_counter%n_cap_train == 0:
        train()
        print("New dataset trained.")
    
    return_dict = {"islanding_flag":False,
                    "capture_counter":capture_counter,
                    "accuracy":acc}
    return return_dict
    

def process_data(signals, wave_dec="haar", Ndec=3):
    """
    """
    features = []
    for signal in signals:
        ca = signal * vphase_peak_to_pu
        for i in range(Ndec):
            ca, cd = pywt.dwt(ca, wave_dec)
            features.append(np.sum(cd**2))      # Energy
            features.append(np.std(cd, ddof=1)) # Standard deviation
    return features


def train():
    data = np.genfromtxt(feat_path+"\\extracted features init.csv", delimiter=",")
    try:
        M, N = data.shape
    except:
        M = 0
    
    x = data[:,0:-1]
    y = data[:,-1]
    user_classifier.fit(x, y)
    
def train_user():
    data = np.genfromtxt(feat_path+"\\extracted features.csv", delimiter=",")
    try:
        M, N = data.shape
    except:
        M = 0
    
    x = data[:,0:-1]
    y = data[:,-1]
    user_classifier.fit(x, y)
]]></initialization_code>
    <components>
        <component_data>
                <id>465c988c2ffd11eb86017085c234cd76</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[images\ieee 34 node islanding.svg]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <widget_settings>
                    <x>456.0</x>
                    <y>120.0</y>
                    <width>700</width>
                    <height>600</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9021772666ae11e9bc5d1c39470d8df4</id>
                <name><![CDATA[Node DG]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['f0010eab300311eb8ef17085c234cd76', 'f0010eac300311eb95b37085c234cd76', 'f0010eae300311eba0fe7085c234cd76', 'f0010eb0300311eb9bd47085c234cd76', 'f0010eb1300311eba46f7085c234cd76', 'f0010eb2300311eba1997085c234cd76', 'f00135c0300311eb89e27085c234cd76', 'f00135c1300311eb95ab7085c234cd76', 'f00135c2300311eb85a87085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>560.0</x>
                    <y>696.0</y>
                    <width>544</width>
                    <height>224</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>78ccddc12ffd11eba12b7085c234cd76</id>
                <name><![CDATA[Grid voltage (pu)]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global return_dict
global training
global lock

with lock:
    hil.set_source_sine_waveform('Vgrid', rms=inputValue*24900/np.sqrt(3), frequency=60.0)
    return_dict = capture_signals(return_dict, training_mode=training)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 1.0
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None


]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1.0]]></inputValue>
                <min>0.7</min>
                <max>1.1</max>
                <step>0.01</step>
                <widget_settings>
                    <x>336.0</x>
                    <y>384.0</y>
                    <width>224</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>78cd04ba2ffd11eb84287085c234cd76</id>
                <name><![CDATA[Initialization]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
global lock

with lock:
    hil.set_contactor('Sdg.enable', swControl=True, swState=True)
    hil.set_contactor('Sgrid.enable', swControl=True, swState=True)
    hil.set_contactor('Sgrid2.enable', swControl=True, swState=True)

    hil.set_source_sine_waveform('Vgrid', rms=24900/np.sqrt(3), frequency=60.0, phase=0.0, harmonics_pu=())
]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
global return_dict
islanding_flag = return_dict.get("islanding_flag")

model_path = hil.get_model_file_path()
img_folder = os.path.dirname(os.path.dirname(model_path))

island_image_widget = panel.get_widget_by_id("841754ec3a6611eb8f687085c234cd76")
if islanding_flag:
    panel.set_property_value(island_image_widget, "image", os.path.join(img_folder, "images/island on.svg"))
else:
    panel.set_property_value(island_image_widget, "image", os.path.join(img_folder, "images/island off.svg"))

]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>360.0</y>
                    <width>104</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6a7581432fff11eba1af7085c234cd76</id>
                <name><![CDATA[802]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['79da4fde2fff11eba5417085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>632.0</x>
                    <y>376.0</y>
                    <width>88</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>79da4fde2fff11eba5417085c234cd76</id>
                <name><![CDATA[Short]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    hil.set_contactor('S3ph_802.enable', swControl=True, swState=inputValue)
    return_dict = capture_signals(return_dict, 'S3ph_802.enable', training_mode=training)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_contactor('S3ph_802.enable', swControl=True, swState=False)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <widget_settings>
                    <x>8.0</x>
                    <y>0.0</y>
                    <width>56</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b4cfbb612fff11ebb9a97085c234cd76</id>
                <name><![CDATA[830]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['b8ab45582fff11eb965f7085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>848.0</x>
                    <y>376.0</y>
                    <width>88</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b8ab45582fff11eb965f7085c234cd76</id>
                <name><![CDATA[Short]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    hil.set_contactor('S3ph_830.enable', swControl=True, swState=inputValue)
    return_dict = capture_signals(return_dict, 'S3ph_830.enable', training_mode=training)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_contactor('S3ph_830.enable', swControl=True, swState=False)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <widget_settings>
                    <x>8.0</x>
                    <y>0.0</y>
                    <width>72</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d4c34d022fff11eba8aa7085c234cd76</id>
                <name><![CDATA[852]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['dd8d62062fff11eb98d27085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>1064.0</x>
                    <y>176.0</y>
                    <width>104</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dd8d62062fff11eb98d27085c234cd76</id>
                <name><![CDATA[Short]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    hil.set_contactor('S3ph_852.enable', swControl=True, swState=inputValue)
    return_dict = capture_signals(return_dict, 'S3ph_852.enable', training_mode=training)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_contactor('S3ph_852.enable', swControl=True, swState=False)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <widget_settings>
                    <x>16.0</x>
                    <y>0.0</y>
                    <width>64</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>eeef47482fff11ebb2637085c234cd76</id>
                <name><![CDATA[842]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['f29068a82fff11eb8fba7085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>816.0</x>
                    <y>200.0</y>
                    <width>104</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f29068a82fff11eb8fba7085c234cd76</id>
                <name><![CDATA[Short]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    hil.set_contactor('S3ph_842.enable', swControl=True, swState=inputValue)
    return_dict = capture_signals(return_dict, 'S3ph_842.enable', training_mode=training)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_contactor('S3ph_842.enable', swControl=True, swState=False)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <widget_settings>
                    <x>16.0</x>
                    <y>0.0</y>
                    <width>64</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>1ebd17ef300011eb88147085c234cd76</id>
                <name><![CDATA[Node 800]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['247c4e97300011eb930f7085c234cd76', '247c4e98300011ebbf387085c234cd76', '247c4e99300011ebb5ef7085c234cd76', '247c4e9a300011ebbde17085c234cd76', '247c4e9b300011ebada97085c234cd76', '247c4e9c300011eb8a9e7085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>112.0</y>
                    <width>448</width>
                    <height>248</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>247c4e97300011eb930f7085c234cd76</id>
                <name><![CDATA[Va]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[NODE 800.Va_rms]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8.0</x>
                    <y>0.0</y>
                    <width>200</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>247c4e98300011ebbf387085c234cd76</id>
                <name><![CDATA[P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE 800.P')/1000


]]></code>
                <signal_name><![CDATA[NODE 800.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>224.0</x>
                    <y>72.0</y>
                    <width>200</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>247c4e99300011ebb5ef7085c234cd76</id>
                <name><![CDATA[S]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE 800.S')/1000


]]></code>
                <signal_name><![CDATA[NODE 800.P]]></signal_name>
                <unit><![CDATA[kVA]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>224.0</x>
                    <y>0.0</y>
                    <width>200</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>247c4e9a300011ebbde17085c234cd76</id>
                <name><![CDATA[pf]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE 800.pf')


]]></code>
                <signal_name><![CDATA[NODE 800.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8.0</x>
                    <y>144.0</y>
                    <width>200</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>247c4e9b300011ebada97085c234cd76</id>
                <name><![CDATA[Ia]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[NODE 800.Ia_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8.0</x>
                    <y>72.0</y>
                    <width>200</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>247c4e9c300011eb8a9e7085c234cd76</id>
                <name><![CDATA[Q]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE 800.Q')/1000


]]></code>
                <signal_name><![CDATA[NODE 800.P]]></signal_name>
                <unit><![CDATA[kvar]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>224.0</x>
                    <y>144.0</y>
                    <width>200</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f0010eab300311eb8ef17085c234cd76</id>
                <name><![CDATA[Va]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE DG.Va_rms')/(24900/np.sqrt(3))


]]></code>
                <signal_name><![CDATA[NODE 854.Va_rms]]></signal_name>
                <unit><![CDATA[pu]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8.0</x>
                    <y>0.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f0010eac300311eb95b37085c234cd76</id>
                <name><![CDATA[S]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE DG.S')/1000


]]></code>
                <signal_name><![CDATA[NODE 800.P]]></signal_name>
                <unit><![CDATA[kVA]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8.0</x>
                    <y>120.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f0010eae300311eba0fe7085c234cd76</id>
                <name><![CDATA[P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE DG.P')/1000


]]></code>
                <signal_name><![CDATA[NODE 800.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>184.0</x>
                    <y>120.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f0010eb0300311eb9bd47085c234cd76</id>
                <name><![CDATA[Ic]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='NODE DG.Va_rms')/(24900/np.sqrt(3))


]]></code>
                <signal_name><![CDATA[NODE DG.Ic_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>360.0</x>
                    <y>56.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f0010eb1300311eba46f7085c234cd76</id>
                <name><![CDATA[Ia]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='NODE DG.Va_rms')/(24900/np.sqrt(3))


]]></code>
                <signal_name><![CDATA[NODE DG.Ia_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>8.0</x>
                    <y>56.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f0010eb2300311eba1997085c234cd76</id>
                <name><![CDATA[Vc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE DG.Vc_rms')/(24900/np.sqrt(3))


]]></code>
                <signal_name><![CDATA[NODE 854.Va_rms]]></signal_name>
                <unit><![CDATA[pu]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>360.0</x>
                    <y>0.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f00135c0300311eb89e27085c234cd76</id>
                <name><![CDATA[Q]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE DG.Q')/1000


]]></code>
                <signal_name><![CDATA[NODE 800.P]]></signal_name>
                <unit><![CDATA[kvar]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>360.0</x>
                    <y>120.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f00135c1300311eb95ab7085c234cd76</id>
                <name><![CDATA[Vb]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='NODE DG.Vb_rms')/(24900/np.sqrt(3))


]]></code>
                <signal_name><![CDATA[NODE 854.Va_rms]]></signal_name>
                <unit><![CDATA[pu]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>184.0</x>
                    <y>0.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>f00135c2300311eb85a87085c234cd76</id>
                <name><![CDATA[Ib]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='NODE DG.Va_rms')/(24900/np.sqrt(3))


]]></code>
                <signal_name><![CDATA[NODE DG.Ib_rms]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>192.0</x>
                    <y>56.0</y>
                    <width>168</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>0e632cb6300411eb8c767085c234cd76</id>
                <name><![CDATA[Sgrid_1]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['18755a22300411ebb8f47085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>536.0</x>
                    <y>264.0</y>
                    <width>104</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>18755a22300411ebb8f47085c234cd76</id>
                <name><![CDATA[Close]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    if inputValue:
        hil.set_contactor('Sgrid.enable', swControl=True, swState=True)
    else:
        hil.set_contactor('Sgrid.enable', swControl=True, swState=False)
    return_dict = capture_signals(return_dict, 'Sgrid.enable', training_mode=training)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = True
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <widget_settings>
                    <x>16.0</x>
                    <y>0.0</y>
                    <width>72</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>2fbdd6d0300411eb97be7085c234cd76</id>
                <name><![CDATA[Sgrid_2]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['362a293b300411eba80b7085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>896.0</x>
                    <y>272.0</y>
                    <width>104</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>362a293b300411eba80b7085c234cd76</id>
                <name><![CDATA[Close]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    hil.set_contactor('Sgrid2.enable', swControl=True, swState=inputValue)
    return_dict = capture_signals(return_dict, 'Sgrid2.enable', training_mode=training)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = True
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <widget_settings>
                    <x>16.0</x>
                    <y>0.0</y>
                    <width>72</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f0d00d1a300511eba8cd7085c234cd76</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    if inputValue:
        hil.set_scada_input_value('Wind Power Plant UI.Enable', 1.0)
    else:
        hil.set_scada_input_value('Wind Power Plant UI.Enable', 0.0)
    return_dict = capture_signals(return_dict, training_mode=training)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = True 
hil.set_scada_input_value('Wind Power Plant UI.Enable', 1.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <widget_settings>
                    <x>712.0</x>
                    <y>592.0</y>
                    <width>96</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f0d00d1b300511eb91527085c234cd76</id>
                <name><![CDATA[Wind speed [m_s]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    hil.set_scada_input_value('Wind Power Plant UI.wind_speed', inputValue)
    return_dict = capture_signals(return_dict, training_mode=training)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 18
hil.set_scada_input_value('Wind Power Plant UI.wind_speed', widgetValue)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 15.0]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[18.0]]></inputValue>
                <min>0.0</min>
                <max>18.0</max>
                <step>0.5</step>
                <widget_settings>
                    <x>712.0</x>
                    <y>632.0</y>
                    <width>240</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>20d530f7300711eb89117085c234cd76</id>
                <name><![CDATA[Sdg]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['275ef169300711eba32d7085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>1032.0</x>
                    <y>384.0</y>
                    <width>96</width>
                    <height>64</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>275ef169300711eba32d7085c234cd76</id>
                <name><![CDATA[Close]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global return_dict
global lock

with lock:
    hil.set_contactor('Sdg.enable', swControl=True, swState=inputValue)
    return_dict = capture_signals(return_dict, 'Sdg.enable', training_mode=training)]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = True
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <widget_settings>
                    <x>8.0</x>
                    <y>0.0</y>
                    <width>72</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>54f98442301b11eba72a7085c234cd76</id>
                <name><![CDATA[Artificial Neural Network]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['d9e83681301f11ebadca7085c234cd76', 'ba23ba623a4811eb856c7085c234cd76', 'ef5a718b3a5f11eb92c47085c234cd76', 'f992b2393a6611eba9e87085c234cd76', 'fea6ea383a6611eb87997085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>0.0</x>
                    <y>464.0</y>
                    <width>544</width>
                    <height>552</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d9e83681301f11ebadca7085c234cd76</id>
                <name><![CDATA[Training]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['0f66ffad3a6111eb85417085c234cd76', 'f91b708d3a6411ebb7ba7085c234cd76', '8682ee803a6511ebb8d47085c234cd76', 'fc71a5ed3a6611ebbe047085c234cd76', 'd9bc01b986f611ebb1bf1c1bb5b93d80', 'd9bc01ba86f611ebbcf21c1bb5b93d80', 'd9bc01bb86f611ebae791c1bb5b93d80', 'd9bc01bc86f611eb87bd1c1bb5b93d80', 'd9bc01bd86f611eb90611c1bb5b93d80']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>32.0</x>
                    <y>56.0</y>
                    <width>224</width>
                    <height>448</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9b059d063a3111ebb3ea7085c234cd76</id>
                <name><![CDATA[LED]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Sgrid.enable_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>576.0</x>
                    <y>336.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>c5bea01f3a3111ebb6bf7085c234cd76</id>
                <name><![CDATA[LED1]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S3ph_802.enable_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>720.0</x>
                    <y>400.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>c74067643a3111ebbe337085c234cd76</id>
                <name><![CDATA[LED2]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S3ph_830.enable_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>808.0</x>
                    <y>400.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>c92896d83a3111eba2087085c234cd76</id>
                <name><![CDATA[LED3]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Sgrid2.enable_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>928.0</x>
                    <y>336.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>cc9042243a3111eba90c7085c234cd76</id>
                <name><![CDATA[LED4]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S3ph_852.enable_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>1056.0</x>
                    <y>248.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>cf425adc3a3111eb91697085c234cd76</id>
                <name><![CDATA[LED5]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[S3ph_842.enable_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>840.0</x>
                    <y>160.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ed5614f53a3111ebb9167085c234cd76</id>
                <name><![CDATA[LED6]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Sdg.enable_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>992.0</x>
                    <y>408.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ba23ba623a4811eb856c7085c234cd76</id>
                <name><![CDATA[Testing]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['84172e443a6611eb95c97085c234cd76', 'bfeba2903a6811ebbde37085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>272.0</x>
                    <y>56.0</y>
                    <width>200</width>
                    <height>320</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ef5a718b3a5f11eb92c47085c234cd76</id>
                <name><![CDATA[Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global training
global can_test

if not can_test and Loaded == False:
    inputValue = "Training"
    print("Cannot test. The ANN was not yet trained.\nTrain a new model or load an existing one.")

training = inputValue == 'Training'
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = "Training"
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Testing]]></inputValue>
                <availableValues><![CDATA[['Training', 'Testing']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <widget_settings>
                    <x>200.0</x>
                    <y>8.0</y>
                    <width>112</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>0f66ffad3a6111eb85417085c234cd76</id>
                <name><![CDATA[Capture counter]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# specify Text Display options ('text' part is mandatory)
global return_dict

textDisplayData = {

    # label text
    "text": str(return_dict.get("capture_counter")%n_cap_train),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>48.0</x>
                    <y>80.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f91b708d3a6411ebb7ba7085c234cd76</id>
                <name><![CDATA[Note component1]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The ANN will be trained with new points when </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">the counter reaches 5</p>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>]]></text>
                <widget_settings>
                    <x>8.0</x>
                    <y>48.0</y>
                    <width>192</width>
                    <height>32</height>
                    <background_color><![CDATA[#ffff00]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[Note component]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>8682ee803a6511ebb8d47085c234cd76</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Speed-up the training of the network</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">by merging a pre-trained model</p></body></html>]]></text>
                <widget_settings>
                    <x>8.0</x>
                    <y>152.0</y>
                    <width>192</width>
                    <height>32</height>
                    <background_color><![CDATA[#ffff00]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>84172e443a6611eb95c97085c234cd76</id>
                <name><![CDATA[Islanding status]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['841754ec3a6611eb8f687085c234cd76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>32.0</x>
                    <y>16.0</y>
                    <width>136</width>
                    <height>152</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>841754ec3a6611eb8f687085c234cd76</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[images\island on.svg]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>128</width>
                    <height>120</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>4</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>f992b2393a6611eba9e87085c234cd76</id>
                <name><![CDATA[Training mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Sgrid_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[global training
global n_cap_train
global can_test
global return_dict

capture_counter = return_dict.get("capture_counter")

if n_cap_train == capture_counter:
    can_test = True

displayValue = training
]]></code>
                <updateRate>250</updateRate>
                <widget_settings>
                    <x>88.0</x>
                    <y>32.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fc71a5ed3a6611ebbe047085c234cd76</id>
                <name><![CDATA[Islanding]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

displayValue = False

islanding = False
switch_names = ['Sgrid.enable', 'Sgrid2.enable', 'Sdg.enable']
for sw in switch_names:
    if not hil.model_read(f'{sw}_fb'):
        islanding = True
        break

displayValue = islanding
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>56.0</x>
                    <y>0.0</y>
                    <width>96</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fea6ea383a6611eb87997085c234cd76</id>
                <name><![CDATA[Testing mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Sgrid_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[displayValue = not training]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>328.0</x>
                    <y>32.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>bfeba2903a6811ebbde37085c234cd76</id>
                <name><![CDATA[Accuracy (last 20 tests)]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# specify Text Display options ('text' part is mandatory)
global return_dict

accuracy = return_dict.get("accuracy")

textDisplayData = {

    # label text
    "text": str(round(accuracy, 2))+'%',

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>32.0</x>
                    <y>176.0</y>
                    <width>136</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>77f0ff5d5b3111ebb02338d547b5f617</id>
                <name><![CDATA[Pa]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Streaming</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Wind Power Plant UI.Pa_probe']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[['Wind Power Plant UI.Pa_streaming_probe']]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>0.00012</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>1112.0</x>
                    <y>472.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>1600000.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>79a81e165b3111ebab1538d547b5f617</id>
                <name><![CDATA[Va]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['NODE 800.Va_rms']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[['Wind Power Plant UI.Va_streaming_probe']]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>500</update_rate>
                <execution_rate>0.00012</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>1112.0</x>
                    <y>680.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>12000.0</y_range_min>
                    <y_range_max>16000.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>8c8fecbc5f2311ebbef338d547b5f617</id>
                <name><![CDATA[Harmonics]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
global return_dict
global training
global lock

with lock:
    if inputValue == 'Pure sine':
        harmonics = ()
        hil.set_source_sine_waveform('Vgrid', harmonics_pu = harmonics)
        return_dict = capture_signals(return_dict,training_mode=training)
        pass
    elif inputValue == 'Harmonics':
        
        harmonics = [(3, 0.02, 0.0), (5, 0.01, 0.0), (7, 0.08, 0.0), (9, 0.01, 0.0),
                  (11, 0.008, 0.0), (2, 0.0, 0.0), (2, 0.0, 0.0), (2, 0.0, 0.0), 
                  (2, 0.0, 0.0), (2, 0.0, 0.0), ]
        hil.set_source_sine_waveform('Vgrid', harmonics_pu = harmonics)
        return_dict = capture_signals(return_dict,training_mode=training)
        pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Pure sine'
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Pure sine]]></inputValue>
                <availableValues><![CDATA[['Pure sine', 'Harmonics']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <widget_settings>
                    <x>400.0</x>
                    <y>432.0</y>
                    <width>160</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>58497435784111eba6531c1bb5b93d80</id>
                <name><![CDATA[LED7]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Wind Power Plant (Average)1.S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>824.0</x>
                    <y>600.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>bc587723827b11eb97721c1bb5b93d80</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">Instructions:</span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">1. Start the simulation.</span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">2. Perform actions in the grid (eg. opening/closing of contactors, enabling/disabling of faults, setting the grid voltage, wind speed...) for training the ANN</span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">3.  After the capture counter is reset, go into testing mode (using the Mode combo box)</span></p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">4. Check the accuracy of the ANN and the assumed islanding status by performing actions in the grid. </span></p></body></html>]]></text>
                <widget_settings>
                    <x>0</x>
                    <y>8</y>
                    <width>1024</width>
                    <height>104</height>
                    <background_color><![CDATA[#ffff00]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d9bc01b986f611ebb1bf1c1bb5b93d80</id>
                <name><![CDATA[User-saved model]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
global LoadedFlagU
global LoadedFlagT

if LoadedFlagU == True:
    displayValue = True
else:
    displayValue = False]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>24.0</x>
                    <y>296.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d9bc01ba86f611ebbcf21c1bb5b93d80</id>
                <name><![CDATA[Typhoon model]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
global LoadedFlagT

if LoadedFlagT == True:
    displayValue = True
else:
    displayValue = False
    
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>24.0</x>
                    <y>232.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d9bc01bb86f611ebae791c1bb5b93d80</id>
                <name><![CDATA[Save model]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
global user_classifier
global feat_path
global training

if training: 
    pickle.dump(user_classifier, open(feat_path + "\\saved_model.sav", 'wb')) 
    print ("Model saved to: ", feat_path + "\\saved_model.sav" )
else:
    print("Cannot save. Model not yet trained.")
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>24.0</x>
                    <y>328.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d9bc01bc86f611eb87bd1c1bb5b93d80</id>
                <name><![CDATA[Load user-saved model]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
global Loaded
global LoadedFlagU
global LoadedFlagT
global filename

filename = feat_path + "\\saved_model.sav"
data = []


try:
    with open(filename, 'rb') as fr:
        try:
            while True:
                data.append(pickle.load(fr))
        except EOFError:
            pass
    train_user()
    print("Model loaded from: ", feat_path + "\\saved_model.sav")
    LoadedFlagU = True
    LoadedFlagT = False
    Loaded = True
except:
    printf("No previously saved model found!")
    pass

]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>24.0</x>
                    <y>264.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d9bc01bd86f611eb90611c1bb5b93d80</id>
                <name><![CDATA[Load Typhoon model]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
global Loaded
global LoadedFlagT
global LoadedFlagU
global filename

filename = feat_path + "\\ieee 34 node islanding.sav"
data = []
Loaded = True
LoadedFlagT = True
LoadedFlagU = False

with open(filename, 'rb') as fr:
    try:
        while True:
            data.append(pickle.load(fr))
    except EOFError:
        pass
train_user()
print("Model loaded from: ", feat_path + "\\ieee 34 node islanding.sav")


]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <widget_settings>
                    <x>24.0</x>
                    <y>200.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b80ba01c888711eb96841c1bb5b93d80</id>
                <name><![CDATA[Capture/Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <working_mode>windowed</working_mode>
                <widget_settings>
                    <x>1200.0</x>
                    <y>32.0</y>
                    <width>120</width>
                    <height>120</height>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Scope</state>
                    <layout>None</layout>
                    <presets>
                        <active_capture_preset><![CDATA[Default]]></active_capture_preset>
                        <active_scope_preset><![CDATA[Default]]></active_scope_preset>
                        <capture name="Default">
                            <time_interval>0.01</time_interval>
                            <sample_rate>166666.66666666666</sample_rate>
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>-1</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>None</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>0.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>white</background_color>
                            <layout>Grid</layout>
                            <legend>True</legend>
                            <show_viewports>1</show_viewports>
                            <decimation>1</decimation>
                            <time_base>0.005</time_base>
                            <analog_signals>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>-1</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>None</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>0.01</time_interval>
                        <sample_rate>166666.66666666666</sample_rate>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Analog</type>
                            <source>None</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>0.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>

                        <analog_signals>
                            </analog_signals>

                         <digital_signals>
                            </digital_signals>

                    </capture>

                    <scope>
                        <time_base>0.005 </time_base>
                        <background_color>white</background_color>
                        <layout>Grid</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Auto</mode>
                            <type>Analog</type>
                            <source>None</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>50.0</offset>
                        </trigger>

                         <analog_signals>
                            </analog_signals>

                        <digital_signals>
                            </digital_signals>

                    </scope>
                    <plotting_options in_use="False">
                    
                        <subplots>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>bdbfde10888711eb9aa71c1bb5b93d80</id>
                <name><![CDATA[Note component1]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">The Capture/Scope is used for capturing </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">datasets for the ANN algorithm</p></body></html>]]></text>
                <widget_settings>
                    <x>1152.0</x>
                    <y>0.0</y>
                    <width>208</width>
                    <height>32</height>
                    <background_color><![CDATA[#ffff00]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[Note component]]></label>
                    <use_label>True</use_label>
                </widget_settings>
            </component_data>
        </components>
</ui_settings>